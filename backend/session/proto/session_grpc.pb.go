// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: session.proto

package sessionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessTokenService_GenerateAccessToken_FullMethodName = "/session.AccessTokenService/GenerateAccessToken"
	AccessTokenService_ValidateAccessToken_FullMethodName = "/session.AccessTokenService/ValidateAccessToken"
)

// AccessTokenServiceClient is the client API for AccessTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================================
// サービス定義
// ================================
type AccessTokenServiceClient interface {
	// アクセストークンの生成（ログイン後・リフレッシュ時）
	GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	// アクセストークンの検証
	ValidateAccessToken(ctx context.Context, in *ValidateAccessTokenRequest, opts ...grpc.CallOption) (*ValidateAccessTokenResponse, error)
}

type accessTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessTokenServiceClient(cc grpc.ClientConnInterface) AccessTokenServiceClient {
	return &accessTokenServiceClient{cc}
}

func (c *accessTokenServiceClient) GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, AccessTokenService_GenerateAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessTokenServiceClient) ValidateAccessToken(ctx context.Context, in *ValidateAccessTokenRequest, opts ...grpc.CallOption) (*ValidateAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccessTokenResponse)
	err := c.cc.Invoke(ctx, AccessTokenService_ValidateAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessTokenServiceServer is the server API for AccessTokenService service.
// All implementations must embed UnimplementedAccessTokenServiceServer
// for forward compatibility.
//
// ================================
// サービス定義
// ================================
type AccessTokenServiceServer interface {
	// アクセストークンの生成（ログイン後・リフレッシュ時）
	GenerateAccessToken(context.Context, *GenerateAccessTokenRequest) (*AccessTokenResponse, error)
	// アクセストークンの検証
	ValidateAccessToken(context.Context, *ValidateAccessTokenRequest) (*ValidateAccessTokenResponse, error)
	mustEmbedUnimplementedAccessTokenServiceServer()
}

// UnimplementedAccessTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessTokenServiceServer struct{}

func (UnimplementedAccessTokenServiceServer) GenerateAccessToken(context.Context, *GenerateAccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (UnimplementedAccessTokenServiceServer) ValidateAccessToken(context.Context, *ValidateAccessTokenRequest) (*ValidateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessToken not implemented")
}
func (UnimplementedAccessTokenServiceServer) mustEmbedUnimplementedAccessTokenServiceServer() {}
func (UnimplementedAccessTokenServiceServer) testEmbeddedByValue()                            {}

// UnsafeAccessTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessTokenServiceServer will
// result in compilation errors.
type UnsafeAccessTokenServiceServer interface {
	mustEmbedUnimplementedAccessTokenServiceServer()
}

func RegisterAccessTokenServiceServer(s grpc.ServiceRegistrar, srv AccessTokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessTokenService_ServiceDesc, srv)
}

func _AccessTokenService_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessTokenServiceServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessTokenService_GenerateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessTokenServiceServer).GenerateAccessToken(ctx, req.(*GenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessTokenService_ValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessTokenServiceServer).ValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessTokenService_ValidateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessTokenServiceServer).ValidateAccessToken(ctx, req.(*ValidateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessTokenService_ServiceDesc is the grpc.ServiceDesc for AccessTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.AccessTokenService",
	HandlerType: (*AccessTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _AccessTokenService_GenerateAccessToken_Handler,
		},
		{
			MethodName: "ValidateAccessToken",
			Handler:    _AccessTokenService_ValidateAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

const (
	RefreshTokenService_GenerateRefreshToken_FullMethodName = "/session.RefreshTokenService/GenerateRefreshToken"
	RefreshTokenService_RevokeRefreshToken_FullMethodName   = "/session.RefreshTokenService/RevokeRefreshToken"
	RefreshTokenService_ValidateRefreshToken_FullMethodName = "/session.RefreshTokenService/ValidateRefreshToken"
)

// RefreshTokenServiceClient is the client API for RefreshTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefreshTokenServiceClient interface {
	// リフレッシュトークンの生成（ログイン時）
	GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// リフレッシュトークンの無効化（ログアウト時など）
	RevokeRefreshToken(ctx context.Context, in *RevokeRefreshTokenRequest, opts ...grpc.CallOption) (*RevokeRefreshTokenResponse, error)
	// リフレッシュトークンの検証
	ValidateRefreshToken(ctx context.Context, in *ValidateRefreshTokenRequest, opts ...grpc.CallOption) (*ValidateRefreshTokenResponse, error)
}

type refreshTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefreshTokenServiceClient(cc grpc.ClientConnInterface) RefreshTokenServiceClient {
	return &refreshTokenServiceClient{cc}
}

func (c *refreshTokenServiceClient) GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, RefreshTokenService_GenerateRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refreshTokenServiceClient) RevokeRefreshToken(ctx context.Context, in *RevokeRefreshTokenRequest, opts ...grpc.CallOption) (*RevokeRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeRefreshTokenResponse)
	err := c.cc.Invoke(ctx, RefreshTokenService_RevokeRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refreshTokenServiceClient) ValidateRefreshToken(ctx context.Context, in *ValidateRefreshTokenRequest, opts ...grpc.CallOption) (*ValidateRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRefreshTokenResponse)
	err := c.cc.Invoke(ctx, RefreshTokenService_ValidateRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefreshTokenServiceServer is the server API for RefreshTokenService service.
// All implementations must embed UnimplementedRefreshTokenServiceServer
// for forward compatibility.
type RefreshTokenServiceServer interface {
	// リフレッシュトークンの生成（ログイン時）
	GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*RefreshTokenResponse, error)
	// リフレッシュトークンの無効化（ログアウト時など）
	RevokeRefreshToken(context.Context, *RevokeRefreshTokenRequest) (*RevokeRefreshTokenResponse, error)
	// リフレッシュトークンの検証
	ValidateRefreshToken(context.Context, *ValidateRefreshTokenRequest) (*ValidateRefreshTokenResponse, error)
	mustEmbedUnimplementedRefreshTokenServiceServer()
}

// UnimplementedRefreshTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRefreshTokenServiceServer struct{}

func (UnimplementedRefreshTokenServiceServer) GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRefreshToken not implemented")
}
func (UnimplementedRefreshTokenServiceServer) RevokeRefreshToken(context.Context, *RevokeRefreshTokenRequest) (*RevokeRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRefreshToken not implemented")
}
func (UnimplementedRefreshTokenServiceServer) ValidateRefreshToken(context.Context, *ValidateRefreshTokenRequest) (*ValidateRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRefreshToken not implemented")
}
func (UnimplementedRefreshTokenServiceServer) mustEmbedUnimplementedRefreshTokenServiceServer() {}
func (UnimplementedRefreshTokenServiceServer) testEmbeddedByValue()                             {}

// UnsafeRefreshTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefreshTokenServiceServer will
// result in compilation errors.
type UnsafeRefreshTokenServiceServer interface {
	mustEmbedUnimplementedRefreshTokenServiceServer()
}

func RegisterRefreshTokenServiceServer(s grpc.ServiceRegistrar, srv RefreshTokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedRefreshTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RefreshTokenService_ServiceDesc, srv)
}

func _RefreshTokenService_GenerateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServiceServer).GenerateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshTokenService_GenerateRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServiceServer).GenerateRefreshToken(ctx, req.(*GenerateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefreshTokenService_RevokeRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServiceServer).RevokeRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshTokenService_RevokeRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServiceServer).RevokeRefreshToken(ctx, req.(*RevokeRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefreshTokenService_ValidateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServiceServer).ValidateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshTokenService_ValidateRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServiceServer).ValidateRefreshToken(ctx, req.(*ValidateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefreshTokenService_ServiceDesc is the grpc.ServiceDesc for RefreshTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefreshTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.RefreshTokenService",
	HandlerType: (*RefreshTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRefreshToken",
			Handler:    _RefreshTokenService_GenerateRefreshToken_Handler,
		},
		{
			MethodName: "RevokeRefreshToken",
			Handler:    _RefreshTokenService_RevokeRefreshToken_Handler,
		},
		{
			MethodName: "ValidateRefreshToken",
			Handler:    _RefreshTokenService_ValidateRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
